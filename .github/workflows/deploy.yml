name: Build and Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Website
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test HTML validity
      uses: Cyb3r-Jak3/html5validator-action@v7.2.0
      with:
        root: ./
        css: true
        format: json

    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: staging
      url: https://staging.awkwardmedia.ca

    steps:
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop and remove existing container
          docker stop awkward-media-staging || true
          docker rm awkward-media-staging || true
          
          # Run new container
          docker run -d \
            --name awkward-media-staging \
            --restart unless-stopped \
            -p 3001:8080 \
            -l "traefik.enable=true" \
            -l "traefik.http.routers.awkward-staging.rule=Host(\`staging.awkwardmedia.ca\`)" \
            -l "traefik.http.routers.awkward-staging.tls=true" \
            -l "traefik.http.routers.awkward-staging.tls.certresolver=letsencrypt" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Clean up old images
          docker image prune -f

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: production
      url: https://awkwardmedia.ca

    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop and remove existing container
          docker stop awkward-media-prod || true
          docker rm awkward-media-prod || true
          
          # Run new container
          docker run -d \
            --name awkward-media-prod \
            --restart unless-stopped \
            -p 3000:8080 \
            -l "traefik.enable=true" \
            -l "traefik.http.routers.awkward-prod.rule=Host(\`awkwardmedia.ca\`, \`www.awkwardmedia.ca\`)" \
            -l "traefik.http.routers.awkward-prod.tls=true" \
            -l "traefik.http.routers.awkward-prod.tls.certresolver=letsencrypt" \
            -l "traefik.http.middlewares.redirect-www.redirectregex.regex=^https://www.awkwardmedia.ca/(.*)" \
            -l "traefik.http.middlewares.redirect-www.redirectregex.replacement=https://awkwardmedia.ca/\$\${1}" \
            -l "traefik.http.middlewares.redirect-www.redirectregex.permanent=true" \
            -l "traefik.http.routers.awkward-prod.middlewares=redirect-www" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Clean up old images
          docker image prune -f

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
    - name: Notify Slack on Success
      if: ${{ needs.deploy-production.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ Awkward Media website deployed successfully to production!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify Slack on Failure
      if: ${{ needs.deploy-production.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Awkward Media website deployment failed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}